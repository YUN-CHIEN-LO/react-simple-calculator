{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["btnList","Calculator","state","text","number","calState","clearFlag","doCalculate","nowNumber","newNumber","handleClick","target","length","parseFloat","replace","newText","newCalState","newClearFlag","slice","tmp","toString","match","setState","renderBtn","className","map","classDark","parseInt","classLarge","onClick","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d8dc0f5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style/index.scss\";\n\n// 按鈕陣列\nconst btnList = [\n  \"7\",\n  \"8\",\n  \"9\",\n  \"DEL\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"+\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"-\",\n  \".\",\n  \"0\",\n  \"/\",\n  \"*\",\n  \"RESET\",\n  \"=\",\n];\n\n/**\n * 計算機組件\n *\n * 注： a + b 中，稱 a 為第一數， + 為運算符， b 為第二數\n */\nclass Calculator extends Component {\n  //#region STATE 狀態\n  state = {\n    // 顯示內容\n    text: \"\",\n    // 存放第一數\n    number: 0,\n    // 存放當前運算符\n    calState: \"\",\n    // 是否重整輸入框\n    clearFlag: false,\n  };\n  //#endregion\n\n  //#region MEHTODS 方法\n\n  /**\n   * 進行運算\n   *\n   * @param {number} nowNumber - 第二數\n   * @returns {number} 運算結果\n   */\n  doCalculate = (nowNumber) => {\n    const { number, calState } = this.state;\n    let newNumber = nowNumber;\n\n    switch (calState) {\n      case \"plus\":\n        newNumber = number + nowNumber;\n        break;\n      case \"minus\":\n        newNumber = number - nowNumber;\n        break;\n      case \"time\":\n        newNumber = number * nowNumber;\n        break;\n      case \"divide\":\n        newNumber = number / nowNumber;\n        break;\n      case \"reset\":\n        newNumber = 0;\n        break;\n      default:\n        break;\n    }\n\n    return newNumber;\n  };\n\n  /**\n   * 處理點擊事件\n   *\n   * @param {string} target - 點擊的按鈕\n   */\n  handleClick = (target) => {\n    const { text, number, calState, clearFlag } = this.state;\n    const { doCalculate } = this;\n    // 預處理第二數格式\n    const nowNumber =\n      text.length > 0 ? parseFloat(text.replace(/^\\./, \"0.\")) : 0;\n    // 暫存狀態\n    let newText = text;\n    let newCalState = \"\";\n    let newNumber = 0;\n    let newClearFlag = clearFlag;\n\n    switch (target) {\n      case \"+\":\n        // 加法\n        newNumber = doCalculate(nowNumber);\n        newCalState = \"plus\";\n        newClearFlag = true;\n        break;\n\n      case \"-\":\n        // 減法\n        newNumber = doCalculate(nowNumber);\n        newCalState = \"minus\";\n        newClearFlag = true;\n        break;\n\n      case \"*\":\n        // 乘法\n        newNumber = doCalculate(nowNumber);\n        newCalState = \"time\";\n        newClearFlag = true;\n        break;\n\n      case \"/\":\n        // 除法\n        newNumber = doCalculate(nowNumber);\n        newCalState = \"divide\";\n        newClearFlag = true;\n        break;\n\n      case \"DEL\":\n        // 刪除\n        newText = text.slice(0, -1).replace(/\\.$/, \"\");\n        break;\n\n      case \"RESET\":\n        // 重製\n        newText = \"\";\n        newNumber = doCalculate(0);\n        break;\n\n      case \"=\":\n        // 等於，進行運算\n        newNumber = doCalculate(nowNumber);\n\n        // 處理計算結果格式\n        const tmp = newNumber.toString();\n        if (tmp === \"NaN\") {\n          // 計算錯誤\n          newText = \"Error\";\n        } else if (tmp.match(/\\./)) {\n          // 處理小數點，取小數點後七位\n          newText = tmp.slice(0, 9);\n        } else if (tmp.length > 8) {\n          // 數字超過顯示範圍\n          newText = \"Exceed\";\n        } else {\n          // 正常狀況\n          newText = tmp;\n        }\n\n        newCalState = \"equals\";\n        break;\n\n      default:\n        // 數字\n        if (clearFlag) {\n          // 清輸入框，出現時機：輸入完第一數及運算符後，輸入第二數前\n          newText = target;\n          newClearFlag = !clearFlag;\n        } else if (\n          text.length === 1 &&\n          text.length[0] === 0 &&\n          target === \"0\"\n        ) {\n          // 連續輸入兩個0\n          newText = \"\";\n        } else if (text.length >= 8 || (target === \".\" && text.match(/\\./))) {\n          // 超過輸入框範圍或重複輸入小數點\n          newText = text;\n        } else {\n          // 正常狀況\n          newText = text + target;\n        }\n        newCalState = calState === \"equals\" ? \"\" : calState;\n        newNumber = calState === \"equals\" ? 0 : number;\n        break;\n    }\n\n    // 更新狀態\n    this.setState({\n      text: newText,\n      number: newNumber,\n      calState: newCalState,\n      clearFlag: newClearFlag,\n    });\n  };\n\n  //#endregion\n\n  //#region RENDER 渲染\n\n  /**\n   * 渲染計算機按鈕\n   *\n   * @returns {JSX}\n   */\n  renderBtn = () => {\n    const { handleClick } = this;\n\n    return (\n      <div className=\"calculator__body\">\n        {btnList.map((target) => {\n          // 數字鍵為深色\n          const classDark =\n            parseInt(target) || parseInt(target) === 0 || target === \"=\"\n              ? \"calculator--dark\"\n              : \"\";\n          // 重製鍵與等於鍵為大按鈕\n          const classLarge =\n            target === \"RESET\" || target === \"=\" ? \"calculator--large\" : \"\";\n\n          return (\n            <div\n              key={target}\n              className={`calculator__btn ${classLarge} ${classDark}`}\n              onClick={() => {\n                // 綁定點及回乎函式\n                handleClick(target);\n              }}\n            >\n              {target}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  /**\n   * 渲染函式\n   *\n   * @returns {JSX} 計算機樣板\n   */\n  render() {\n    const { text } = this.state;\n    const { renderBtn } = this;\n    return (\n      <div className=\"App\">\n        <div className=\"calculator\">\n          <div className=\"calculator__input\"> {text} </div>\n          {renderBtn()}\n        </div>\n      </div>\n    );\n  }\n  //#endregion\n}\n\nexport default Calculator;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}